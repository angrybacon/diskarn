#+TITLE: Diskarn
#+AUTHOR: Mathieu Marques

[[./LICENSE.org][https://img.shields.io/github/license/angrybacon/diskarn.svg?style=flat-square]]

** Preamble

I find it very irritating that Discord bots lure you with promising features and
progressively hide them behind a paywall and so /Diskarn/ will be my playground
to provide said features for my own use. We're all consenting adults, read the
licensing, read the source and adjust your expectations if you want to test it
out yourself.

#+BEGIN_QUOTE
This was also supposed to be my [[https://deno.com/][Deno 2]] playground but it
proved insufficiently stable at the time of the first commit. In their defense,
the v2 was a couple hours old. Added to the evergrowing todo list.
#+END_QUOTE

I've chosen a name that doesn't directly reflect the features of the bot on
purpose so that I can add or remove anything I want whenever I want. The list is
currently pretty short.

- YouTube notifications

** How Does It Work?

The code is open source for a reason. The code should be obvious and
self-documenting but here is a short breakdown if you're that lazy.

- =bot= :: Handle the connection and interaction with the Discord servers. This
  is using [[https://discordeno.js.org/][Discordeno]] to interact with the
  Discord guilds.
- =karnnect= :: Connect (get it?) to YouTube notifications. No polling here,
  only renewable /WebSub/ subscriptions. YouTube's implementation of the
  /WebSub/ standard is lacking and the expiring date is not reliable so the
  servers asks for a 10 days lease and renew the subscriptions every week.
- =server= :: Implement HTTP routes

#+BEGIN_QUOTE
*Disclaimer*: YouTube /WebSub/ notifications are triggered for all events and
there's currently no way to filter out some events eg. if the channel author
edits the video title, your callback endpoint will receive a new notification.

Since this project is small enough, a local =Set= in memory is probably enough
to prevent /duplicate/ notifications. The counterpart is that it assumes the bot
is deployed in a single instance for each of your servers (or a single instance
for all your servers). If not, each instance will have their own =Set= and
uniqueness will not be reliable.
#+END_QUOTE

** Installation

I estimate the number of readers to be about 2 (/me/ and future /me/) so if the
following steps don't work, it's probably your fault.

1. Create a bot with an appropriate name at https://discord.com/developers
1. Invite the bot to your server with your preferred method. A link from the
   above platform usually, with the appropriate permissions
1. Create a =.env.local= and configure it if you plan on testing the bot locally
1. Configure the necessary environment variables

** Variables

- =DATABASE_URL= :: Remote database URL
- =HOST= :: Must be set to =0.0.0.0= when online
- =PORT= :: You can largely ignore this, but is provided for customization
- =SKIP_SUBSCRIPTION= :: Skip the subscription events to prevent the noise
- =TOKEN= :: Your Discord token
- =VERBOSE= :: Whether it should log more about what it's currently doing
- =WEBSUB_CALLBACK_DOMAIN= :: Where the Diskarn server will be hosted
